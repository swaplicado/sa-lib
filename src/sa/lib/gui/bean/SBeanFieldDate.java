/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SBeanFieldDate.java
 *
 * Created on 17/06/2011, 04:14:33 PM
 */

package sa.lib.gui.bean;

import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JPanel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiField;
import sa.lib.gui.SGuiFieldDate;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Sergio Flores
 */
public class SBeanFieldDate extends JPanel implements SGuiFieldDate {

    protected String msFieldName;
    protected int mnGuiType;
    protected SimpleDateFormat moSimpleDateFormat;
    protected Date mtDefaultValue;
    protected Date mtMinDate;
    protected Date mtMaxDate;
    protected boolean mbMandatory;
    protected SGuiField moNextField;
    protected JButton moNextButton;
    protected JButton moFormButton;
    protected int mnTab;
    protected SGuiClient miClient;

    /** Creates new form SBeanFieldDate */
    public SBeanFieldDate() {
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jftDate = new javax.swing.JFormattedTextField();
        jbDate = new javax.swing.JButton();

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        setLayout(new java.awt.BorderLayout(5, 0));

        jftDate.setMinimumSize(new java.awt.Dimension(50, 23));
        jftDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jftDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jftDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jftDateFocusLost(evt);
            }
        });
        jftDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jftDateKeyPressed(evt);
            }
        });
        add(jftDate, java.awt.BorderLayout.CENTER);

        jbDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_cal.gif"))); // NOI18N
        jbDate.setToolTipText("Seleccionar fecha");
        jbDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDateActionPerformed(evt);
            }
        });
        add(jbDate, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jftDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jftDateFocusGained
        jftDate.setCaretPosition(0);
        jftDate.selectAll();
    }//GEN-LAST:event_jftDateFocusGained

    private void jftDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jftDateFocusLost
        setValue(parseDate());
    }//GEN-LAST:event_jftDateFocusLost

    private void jbDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDateActionPerformed
        SGuiUtils.pickDate(miClient.getDatePicker(), parseDate(), this);
    }//GEN-LAST:event_jbDateActionPerformed

    private void jftDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jftDateKeyPressed
        keyPressedDate(evt);
    }//GEN-LAST:event_jftDateKeyPressed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        if (evt.getOppositeComponent() != jftDate) {
            processFocus();
        }
    }//GEN-LAST:event_formFocusGained

    private void initComponentsCustom() {
        msFieldName = "";
        mnGuiType = SLibConsts.UNDEFINED;
        moSimpleDateFormat = null;
        mtDefaultValue = null;
        mtMinDate = SLibTimeUtils.createDate(SLibTimeConsts.YEAR_MIN, 1, 1);
        mtMaxDate = SLibTimeUtils.createDate(SLibTimeConsts.YEAR_MAX, 12, 31);
        mbMandatory = true;
        moNextField = null;
        moNextButton = null;
        moFormButton = null;
        mnTab = -1;
        miClient = null;

        jftDate.setToolTipText(SGuiConsts.MSG_GUI_TTT_PICK_DATE);

        resetGuiType();
        resetField();
    }

    private void resetGuiType() {
        mnGuiType = SGuiConsts.GUI_TYPE_DATE;
        moSimpleDateFormat = SLibUtils.DateFormatDate;
        defineMaskFormatter(moSimpleDateFormat.toPattern());
    }

    private void defineMaskFormatter(String pattern) {
        try {
            jftDate.setFormatterFactory(new DefaultFormatterFactory(new MaskFormatter(SGuiUtils.createMaskFormatterDatetime(pattern))));
        }
        catch (java.text.ParseException e) {
            SLibUtils.printException(this, e);
        }
    }

    private Date parseDate() {
        Date date = null;

        try {
            date = moSimpleDateFormat.parse(jftDate.getText());
        }
        catch (Exception e) {

        }

        return date;
    }

    private void keyPressedDate(KeyEvent event) {
        if (event.getKeyCode() == KeyEvent.VK_F5) {
            jbDate.doClick();
        }
        else if (event.getKeyCode() == KeyEvent.VK_ENTER) {
            if (moNextButton != null && moNextButton.isEnabled()) {
                moNextButton.requestFocus();
            }
            else if (moNextField != null) {
                moNextField.processFocus();
            }
            else if (moFormButton != null && moFormButton.isEnabled()) {
                moFormButton.requestFocus();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbDate;
    private javax.swing.JFormattedTextField jftDate;
    // End of variables declaration//GEN-END:variables

    /*
     * Class public methods:
     */

    /*
     * Implemented and overrided methods:
     */

    @Override
    public void setFieldName(final String name) {
        msFieldName = name;
    }

    @Override
    public int getDataType() {
        return SLibConsts.DATA_TYPE_DATE;
    }

    @Override
    public int getGuiType() {
        return mnGuiType;
    }

    @Override
    public String getFieldName() {
        return msFieldName;
    }

    @Override
    public JFormattedTextField getComponent() {
        return jftDate;
    }

    @Override
    public boolean isMandatory() {
        return mbMandatory;
    }

    @Override
    public void setValue(final Object value) {
        jftDate.setValue(value == null ? "" : moSimpleDateFormat.format((Date) value));
    }

    @Override
    public void setDefaultValue(final Object value) {
        mtDefaultValue = (Date) value;
    }

    @Override
    public void setEnabled(final boolean enabled) {
        jftDate.setEnabled(enabled);
        jbDate.setEnabled(enabled);
    }

    @Override
    public void setEditable(final boolean editable) {
        jftDate.setEditable(editable);
        jftDate.setFocusable(editable);
        jbDate.setEnabled(editable);
    }

    @Override
    public void setNextField(final SGuiField field) {
        moNextField = field;
    }

    @Override
    public void setNextButton(final JButton button) {
        moNextButton = button;
    }

    @Override
    public void setFormButton(final JButton button) {
        moFormButton = button;
    }

    @Override
    public void setTab(int tab) {
        mnTab = tab;
    }

    @Override
    public int getTab() {
        return mnTab;
    }

    @Override
    public boolean isEnabled() {
        return jftDate.isEnabled();
    }

    @Override
    public boolean isEditable() {
        return jftDate.isEditable();
    }

    @Override
    public boolean isFocusable() {
        return jftDate.isEnabled() && jftDate.isEditable() && jftDate.isFocusable();
    }

    @Override
    public SGuiField getNextField() {
        return moNextField;
    }

    @Override
    public JButton getNextButton() {
        return moNextButton;
    }

    @Override
    public JButton getFormButton() {
        return moFormButton;
    }

    @Override
    public void processFocus() {
        if (isFocusable()) {
            jftDate.requestFocus();
        }
        else {
            jftDateKeyPressed(new KeyEvent(jftDate, KeyEvent.KEY_PRESSED, 0, 0, KeyEvent.VK_ENTER, KeyEvent.CHAR_UNDEFINED));
        }
    }

    @Override
    public void resetField() {
        setValue(mtDefaultValue);
    }

    @Override
    public SGuiValidation validateField() {
        Date date = null;
        SGuiValidation validation = new SGuiValidation();

        jftDateFocusLost(null);

        date = parseDate();

        if (mbMandatory && date == null) {
            validation.setMessage("Se debe especificar un valor " + SGuiUtils.getLabelDatetime(mnGuiType) + " para el campo '" + msFieldName + "'.");
        }
        else if (date != null && mtMinDate != null && date.before(mtMinDate)) {
            validation.setMessage("El valor " + SGuiUtils.getLabelDatetime(mnGuiType) + " del campo '" + msFieldName + "' no puede ser anterior a " + moSimpleDateFormat.format(mtMinDate) + ".");
        }
        else if (date != null && mtMaxDate != null && date.after(mtMaxDate)) {
            validation.setMessage("El valor " + SGuiUtils.getLabelDatetime(mnGuiType) + " del campo '" + msFieldName + "' no puede ser posterior a " + moSimpleDateFormat.format(mtMaxDate) + ".");
        }

        if (!validation.isValid()) {
            validation.setComponent(jftDate);
            validation.setTab(mnTab);
        }

        return validation;
    }

    /*
     * Implementation of SGuiFieldDate:
     */

    @Override
    public Date getValue() {
        return parseDate();
    }

    @Override
    public Date getDefaultValue() {
        return mtDefaultValue;
    }

    @Override
    public void setDateSettings(final SGuiClient client, final String name, final boolean isMandatory) {
        miClient = client;
        setFieldName(name);
        setMandatory(isMandatory);
    }

    @Override
    public void setMandatory(final boolean mandatory) {
        mbMandatory = mandatory;
    }

    @Override
    public void setGuiType(final int type) {
        mnGuiType = type;

        switch (type) {
            case SGuiConsts.GUI_TYPE_DATE:
                moSimpleDateFormat = SLibUtils.DateFormatDate;
                break;
            case SGuiConsts.GUI_TYPE_DATE_DATETIME:
                moSimpleDateFormat = SLibUtils.DateFormatDatetime;
                break;
            case SGuiConsts.GUI_TYPE_DATE_TIME:
                moSimpleDateFormat = SLibUtils.DateFormatTime;
                break;
            default:
                resetGuiType();
        }

        defineMaskFormatter(moSimpleDateFormat.toPattern());
    }

    @Override
    public void setMinDate(final Date min) {
        mtMinDate = min;
    }

    @Override
    public void setMaxDate(final Date max) {
        mtMaxDate = max;
    }

    @Override
    public Date getMinDate() {
        return mtMinDate;
    }

    @Override
    public Date getMaxDate() {
        return mtMaxDate;
    }
}
