/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SBeanPanel.java
 *
 * Created on 1/10/2011, 12:57:26 PM
 */

package sa.lib.gui.bean;

import javax.swing.JPanel;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiField;
import sa.lib.gui.SGuiFields;
import sa.lib.gui.SGuiPanel;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Sergio Flores
 */
public abstract class SBeanPanel extends JPanel implements SGuiPanel {

    protected SGuiClient miClient;
    protected int mnPanelStatus;
    protected SGuiFields moFields;

    /** Creates new form SBeanPanel */
    public SBeanPanel() {
        initComponents();
        initComponentsBean();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsBean() {
        miClient = null;
        mnPanelStatus = SLibConsts.UNDEFINED;
        moFields = new SGuiFields();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /*
     * Public methods
     */

    public JPanel getBeanPanel() {
        return this;
    }

    /*
     * Overriden methods
     */

    @Override
    public int getPanelStatus() {
        return mnPanelStatus;
    }

    @Override
    public void setPanelSettings(SGuiClient client) {
        miClient = client;
    }

    @Override
    public void setPanelEditable(boolean editable) {
        if (editable) {
            mnPanelStatus = SGuiConsts.FORM_STATUS_EDIT;
            moFields.setFieldsEditable(true);
        }
        else {
            mnPanelStatus = SGuiConsts.FORM_STATUS_READ;
            moFields.setFieldsEditable(false);
        }
    }

    public abstract void addAllListeners();
    public abstract void removeAllListeners();
    public abstract void reloadCatalogues();
    public abstract void setRegistry(SDbRegistry registry) throws Exception;
    public abstract SDbRegistry getRegistry() throws Exception;
    public abstract SGuiValidation validatePanel();

    @Override
    public SGuiField getFieldFirst() {
        SGuiField fieldFirst = null;

        for (SGuiField field : moFields.getFields()) {
            if (field.isFocusable()) {
                fieldFirst = field;
                break;
            }
        }

        return fieldFirst;
    }

    @Override
    public SGuiField getFieldLast() {
        SGuiField fieldLast = null;

        for (int i = moFields.getFields().size() - 1; i >= 0; i--) {
            if (moFields.getFields().get(i).isFocusable()) {
                fieldLast = moFields.getFields().get(i);
                break;
            }
        }

        return fieldLast;
    }

    @Override
    public SGuiFields getFields() {
        return moFields;
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
