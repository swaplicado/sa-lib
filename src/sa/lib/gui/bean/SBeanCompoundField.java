/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SBeanCompoundField.java
 *
 * Created on 1/10/2011, 07:44:26 PM
 */

package sa.lib.gui.bean;

import java.awt.Font;
import javax.swing.JPanel;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiCompoundField;
import sa.lib.gui.SGuiFieldDecimal;

/**
 *
 * @author Sergio Flores
 */
public class SBeanCompoundField extends JPanel implements SGuiCompoundField {

    protected SGuiClient miClient;

    /** Creates new form SBeanCompoundField */
    public SBeanCompoundField() {
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moDecValue = new sa.lib.gui.bean.SBeanFieldDecimal();
        jtfText = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout(5, 0));
        add(moDecValue, java.awt.BorderLayout.CENTER);

        jtfText.setEditable(false);
        jtfText.setText("TEXT");
        jtfText.setFocusable(false);
        jtfText.setPreferredSize(new java.awt.Dimension(35, 23));
        add(jtfText, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        miClient = null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jtfText;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecValue;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setCompoundFieldSettings(SGuiClient client) {
        miClient = client;
    }

    @Override
    public void setCompoundText(String text) {
        jtfText.setText(SLibUtils.textTrim(text));
        jtfText.setCaretPosition(0);
    }

    @Override
    public SGuiFieldDecimal getField() {
        return moDecValue;
    }

    @Override
    public String getCompoundText() {
        return jtfText.getText();
    }

    @Override
    public void setCompoundFont(final Font font) {
        super.setFont(font);
        moDecValue.setFont(font);
        jtfText.setFont(font);
    }

    @Override
    public void setEnabled(boolean enabled) {
        moDecValue.setEnabled(enabled);
        jtfText.setEnabled(enabled);
    }

    @Override
    public void setEditable(boolean editable) {
        moDecValue.setEditable(editable);
    }

    @Override
    public boolean isEnabled() {
        return moDecValue.isEnabled();
    }

    @Override
    public boolean isEditable() {
        return moDecValue.isEditable();
    }
}
