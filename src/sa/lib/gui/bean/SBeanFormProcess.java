/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DBeanForm.java
 *
 * Created on 30/06/2011, 12:00:26 AM
 */

package sa.lib.gui.bean;

import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;
import sa.lib.SLibConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFormProcess;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Sergio Flores
 */
public abstract class SBeanFormProcess extends JDialog implements SGuiFormProcess {

    public static JFrame OwnerFrame;

    protected SGuiClient miClient;
    protected int mnFormType;
    protected int mnFormSubtype;
    protected int mnFormResult;
    protected boolean mbFirstActivation;
    protected String msTitle;
    protected Vector<SGridPaneForm> mvFormGrids;

    /** Creates new form DBeanForm */
    public SBeanFormProcess() {
        super(OwnerFrame, true);
        initComponents();
        initComponentsBean();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jpCommand = new javax.swing.JPanel();
        jpCommandLeft = new javax.swing.JPanel();
        jpCommandCenter = new javax.swing.JPanel();
        jpCommandRight = new javax.swing.JPanel();
        jbPrev = new javax.swing.JButton();
        jbNext = new javax.swing.JButton();
        jbFinish = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DBeanForm");
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jpContainer.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);

        jpCommand.setLayout(new java.awt.BorderLayout());

        jpCommandLeft.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jpCommand.add(jpCommandLeft, java.awt.BorderLayout.WEST);
        jpCommand.add(jpCommandCenter, java.awt.BorderLayout.CENTER);

        jpCommandRight.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrev.setText("Anterior");
        jbPrev.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbPrev.setMaximumSize(new java.awt.Dimension(75, 23));
        jbPrev.setMinimumSize(new java.awt.Dimension(75, 23));
        jbPrev.setPreferredSize(new java.awt.Dimension(75, 23));
        jbPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrevActionPerformed(evt);
            }
        });
        jpCommandRight.add(jbPrev);

        jbNext.setText("Siguiente");
        jbNext.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbNext.setMaximumSize(new java.awt.Dimension(75, 23));
        jbNext.setMinimumSize(new java.awt.Dimension(75, 23));
        jbNext.setPreferredSize(new java.awt.Dimension(75, 23));
        jbNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNextActionPerformed(evt);
            }
        });
        jpCommandRight.add(jbNext);

        jbFinish.setText("Terminar");
        jbFinish.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbFinish.setMaximumSize(new java.awt.Dimension(75, 23));
        jbFinish.setMinimumSize(new java.awt.Dimension(75, 23));
        jbFinish.setPreferredSize(new java.awt.Dimension(75, 23));
        jbFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFinishActionPerformed(evt);
            }
        });
        jpCommandRight.add(jbFinish);

        jbCancel.setText("Cancelar");
        jbCancel.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCancel.setMaximumSize(new java.awt.Dimension(75, 23));
        jbCancel.setMinimumSize(new java.awt.Dimension(75, 23));
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jpCommandRight.add(jbCancel);

        jpCommand.add(jpCommandRight, java.awt.BorderLayout.EAST);

        getContentPane().add(jpCommand, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-480)/2, (screenSize.height-300)/2, 480, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void jbPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrevActionPerformed
        actionPrev();
    }//GEN-LAST:event_jbPrevActionPerformed

    private void jbNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNextActionPerformed
        actionNext();
    }//GEN-LAST:event_jbNextActionPerformed

    private void jbFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFinishActionPerformed
        actionFinish();
    }//GEN-LAST:event_jbFinishActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        windowClosed();
    }//GEN-LAST:event_formWindowClosed

    protected void initComponentsBean() {
        miClient = null;
        mnFormType = SLibConsts.UNDEFINED;
        mnFormSubtype = SLibConsts.UNDEFINED;
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = false;
        mvFormGrids = new Vector<SGridPaneForm>();

        SGuiUtils.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE);
    }

    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jbCancel.requestFocus();
        }
    }

    protected void windowClosed() {
        for (SGridPaneForm grid : mvFormGrids) {
            grid.paneViewClosed();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton jbCancel;
    protected javax.swing.JButton jbFinish;
    protected javax.swing.JButton jbNext;
    protected javax.swing.JButton jbPrev;
    private javax.swing.JPanel jpCommand;
    private javax.swing.JPanel jpCommandCenter;
    private javax.swing.JPanel jpCommandLeft;
    private javax.swing.JPanel jpCommandRight;
    private javax.swing.JPanel jpContainer;
    // End of variables declaration//GEN-END:variables

    /*
     * Public methods
     */

    public JPanel getBeanPanel() {
        return jpContainer;
    }

    public void addFormGrids(SGridPaneForm[] grids) {
        if (grids != null) {
            for (SGridPaneForm grid : grids) {
                mvFormGrids.add(grid);
            }
        }
    }

    /*
     * Overriden methods
     */

    @Override
    public int getFormType() {
        return mnFormType;
    }

    @Override
    public int getFormSubtype() {
        return mnFormSubtype;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setFormSettings(final SGuiClient client, final int formType, final int formSubtype, final String title) {
        miClient = client;
        mnFormType = formType;
        mnFormSubtype = formSubtype;
        msTitle = title;

        setTitle(msTitle);
    }

    @Override
    public void setFormVisible(final boolean visible) {
        setVisible(visible);
    }

    public abstract void setValue(final int type, final Object value);
    public abstract Object getValue(final int type);

    public abstract void actionPrev();
    public abstract void actionNext();
    public abstract void actionFinish();

    @Override
    public void actionCancel() {
        mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
        dispose();
    }
}
