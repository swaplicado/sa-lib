/*
 * SGuiDatePicker.java
 *
 * Created on 3 de abril de 2008, 08:26 PM
 */

package sa.lib.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import javax.swing.JDialog;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;

/**
 *
 * @author Sergio Flores
 */
public class SGuiDatePicker extends JDialog implements SGuiOptionPicker, ActionListener {

    private int mnPickerType;
    private int mnPickerResult;
    private boolean mbFirstActivation;
    private SGuiClient miClient;

    private String[] masMonths;
    private SGuiDate moGuiDate;

    /**
     * Creates new form SGuiDatePicker
     *
     * @param client Client interface.
     * @param formType Constants defined in erp.lib.SLibConsts.
     */
    public SGuiDatePicker(SGuiClient client, int pickerType) {
        super(client.getFrame(), true);
        miClient = client;
        mnPickerType = pickerType;

        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpCalendarCmd = new javax.swing.JPanel();
        jpCalendarCmdPrev = new javax.swing.JPanel();
        jbPrevYear = new javax.swing.JButton();
        jbPrevMonth = new javax.swing.JButton();
        jpCalendarCmdLabel = new javax.swing.JPanel();
        jlMonth = new javax.swing.JLabel();
        jpCalendarCmdNext = new javax.swing.JPanel();
        jbNextMonth = new javax.swing.JButton();
        jbNextYear = new javax.swing.JButton();
        jpCalendar = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtCalendar = new javax.swing.JTable();
        jpCommand = new javax.swing.JPanel();
        jpCommandDates = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        jtfDate = new javax.swing.JTextField();
        jlSystemDate = new javax.swing.JLabel();
        jtfSystemDate = new javax.swing.JTextField();
        jlWorkingDate = new javax.swing.JLabel();
        jtfWorkingDate = new javax.swing.JTextField();
        jpCommandButtons = new javax.swing.JPanel();
        jpButtonsSys = new javax.swing.JPanel();
        jbSystemDate = new javax.swing.JButton();
        jbWorkingDate = new javax.swing.JButton();
        jpButtonsUser = new javax.swing.JPanel();
        jbSelectedDate = new javax.swing.JButton();
        jbSelectedMonth = new javax.swing.JButton();
        jbSelectedYear = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setTitle("Calendario");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpCalendarCmd.setLayout(new java.awt.BorderLayout());

        jbPrevYear.setText("<<");
        jbPrevYear.setToolTipText("Año anterior [Ctrl+Re Pág]");
        jbPrevYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jpCalendarCmdPrev.add(jbPrevYear);

        jbPrevMonth.setText("<");
        jbPrevMonth.setToolTipText("Mes anterior [Re pág]");
        jbPrevMonth.setPreferredSize(new java.awt.Dimension(50, 23));
        jpCalendarCmdPrev.add(jbPrevMonth);

        jpCalendarCmd.add(jpCalendarCmdPrev, java.awt.BorderLayout.WEST);

        jlMonth.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlMonth.setText("Enero 2001");
        jlMonth.setPreferredSize(new java.awt.Dimension(150, 20));
        jpCalendarCmdLabel.add(jlMonth);

        jpCalendarCmd.add(jpCalendarCmdLabel, java.awt.BorderLayout.CENTER);

        jbNextMonth.setText(">");
        jbNextMonth.setToolTipText("Mes siguiente [Av pág]");
        jbNextMonth.setPreferredSize(new java.awt.Dimension(50, 23));
        jpCalendarCmdNext.add(jbNextMonth);

        jbNextYear.setText(">>");
        jbNextYear.setToolTipText("Año siguiente [Ctrl+Av Pág]");
        jbNextYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jpCalendarCmdNext.add(jbNextYear);

        jpCalendarCmd.add(jpCalendarCmdNext, java.awt.BorderLayout.EAST);

        getContentPane().add(jpCalendarCmd, java.awt.BorderLayout.NORTH);

        jpCalendar.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        jpCalendar.setLayout(new java.awt.BorderLayout());

        jtCalendar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "D", "L", "M", "M", "J", "V", "S"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtCalendar.setCellSelectionEnabled(true);
        jtCalendar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtCalendarMouseClicked(evt);
            }
        });
        jtCalendar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtCalendarKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jtCalendar);

        jpCalendar.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpCalendar, java.awt.BorderLayout.CENTER);

        jpCommand.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 0, 0));
        jpCommand.setLayout(new java.awt.BorderLayout());

        jpCommandDates.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        jpCommandDates.setLayout(new java.awt.GridLayout(1, 6, 5, 5));

        jlDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDate.setText("F. actual:");
        jlDate.setMaximumSize(new java.awt.Dimension(70, 23));
        jlDate.setMinimumSize(new java.awt.Dimension(70, 23));
        jlDate.setPreferredSize(new java.awt.Dimension(70, 23));
        jpCommandDates.add(jlDate);

        jtfDate.setEditable(false);
        jtfDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfDate.setText("01/01/2001");
        jtfDate.setFocusable(false);
        jtfDate.setMaximumSize(new java.awt.Dimension(70, 23));
        jtfDate.setMinimumSize(new java.awt.Dimension(70, 23));
        jtfDate.setPreferredSize(new java.awt.Dimension(70, 23));
        jpCommandDates.add(jtfDate);

        jlSystemDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlSystemDate.setText("F. sistema:");
        jlSystemDate.setMaximumSize(new java.awt.Dimension(70, 23));
        jlSystemDate.setMinimumSize(new java.awt.Dimension(70, 23));
        jlSystemDate.setPreferredSize(new java.awt.Dimension(70, 23));
        jpCommandDates.add(jlSystemDate);

        jtfSystemDate.setEditable(false);
        jtfSystemDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfSystemDate.setText("01/01/2001");
        jtfSystemDate.setFocusable(false);
        jtfSystemDate.setMaximumSize(new java.awt.Dimension(70, 23));
        jtfSystemDate.setMinimumSize(new java.awt.Dimension(70, 23));
        jtfSystemDate.setPreferredSize(new java.awt.Dimension(70, 23));
        jpCommandDates.add(jtfSystemDate);

        jlWorkingDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlWorkingDate.setText("F. trabajo:");
        jlWorkingDate.setMaximumSize(new java.awt.Dimension(70, 23));
        jlWorkingDate.setMinimumSize(new java.awt.Dimension(70, 23));
        jlWorkingDate.setPreferredSize(new java.awt.Dimension(70, 23));
        jpCommandDates.add(jlWorkingDate);

        jtfWorkingDate.setEditable(false);
        jtfWorkingDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfWorkingDate.setText("01/01/2001");
        jtfWorkingDate.setFocusable(false);
        jtfWorkingDate.setMaximumSize(new java.awt.Dimension(70, 23));
        jtfWorkingDate.setMinimumSize(new java.awt.Dimension(70, 23));
        jtfWorkingDate.setPreferredSize(new java.awt.Dimension(70, 23));
        jpCommandDates.add(jtfWorkingDate);

        jpCommand.add(jpCommandDates, java.awt.BorderLayout.NORTH);

        jpCommandButtons.setLayout(new java.awt.BorderLayout());

        jpButtonsSys.setLayout(new java.awt.FlowLayout(0));

        jbSystemDate.setText("F. sistema");
        jbSystemDate.setToolTipText("Fecha de sistema [Ctrl+S]");
        jbSystemDate.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbSystemDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jpButtonsSys.add(jbSystemDate);

        jbWorkingDate.setText("F. trabajo");
        jbWorkingDate.setToolTipText("Fecha de trabajo [Ctrl+T]");
        jbWorkingDate.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbWorkingDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jpButtonsSys.add(jbWorkingDate);

        jpCommandButtons.add(jpButtonsSys, java.awt.BorderLayout.WEST);

        jpButtonsUser.setLayout(new java.awt.FlowLayout(2));

        jbSelectedDate.setText("Día");
        jbSelectedDate.setToolTipText("Día actual [Ctrl+D]");
        jbSelectedDate.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbSelectedDate.setPreferredSize(new java.awt.Dimension(50, 23));
        jpButtonsUser.add(jbSelectedDate);

        jbSelectedMonth.setText("Mes");
        jbSelectedMonth.setToolTipText("Mes actual [Ctrl+M]");
        jbSelectedMonth.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbSelectedMonth.setPreferredSize(new java.awt.Dimension(50, 23));
        jpButtonsUser.add(jbSelectedMonth);

        jbSelectedYear.setText("Año");
        jbSelectedYear.setToolTipText("Año actual [Ctrl+A]");
        jbSelectedYear.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbSelectedYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jpButtonsUser.add(jbSelectedYear);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jpButtonsUser.add(jbCancel);

        jpCommandButtons.add(jpButtonsUser, java.awt.BorderLayout.CENTER);

        jpCommand.add(jpCommandButtons, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpCommand, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-448)/2, (screenSize.height-260)/2, 448, 260);
    }// </editor-fold>//GEN-END:initComponents

    private void jtCalendarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtCalendarMouseClicked
        if (evt.getClickCount() == 2) {
            actionSelectedDate();
        }
    }//GEN-LAST:event_jtCalendarMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jtCalendar.requestFocus();
        }
    }//GEN-LAST:event_formWindowActivated

    private void jtCalendarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtCalendarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            actionSelectedDate();
        }
    }//GEN-LAST:event_jtCalendarKeyPressed

    private void initComponentsCustom() {
        String[] days = SLibTimeUtils.createDaysOfWeekStd(Calendar.SHORT);
        masMonths = SLibTimeUtils.createMonthsOfYear(Locale.getDefault(), Calendar.LONG);

        for (int i = 0; i < jtCalendar.getColumnCount(); i++) {
            jtCalendar.getColumnModel().getColumn(i).setHeaderValue(days[i]);
        }

        jbPrevMonth.addActionListener(this);
        jbPrevYear.addActionListener(this);
        jbNextMonth.addActionListener(this);
        jbNextYear.addActionListener(this);
        jbSystemDate.addActionListener(this);
        jbWorkingDate.addActionListener(this);
        jbSelectedDate.addActionListener(this);
        jbSelectedMonth.addActionListener(this);
        jbSelectedYear.addActionListener(this);
        jbCancel.addActionListener(this);

        if (mnPickerType == SGuiConsts.DATE_PICKER_DATE) {
            jbSelectedMonth.setEnabled(false);
            jbSelectedYear.setEnabled(false);
        }

        SGuiUtils.createActionMap(rootPane, this, "actionPrevMonth", "prevMonth", KeyEvent.VK_PAGE_UP, 0);
        SGuiUtils.createActionMap(rootPane, this, "actionPrevYear", "prevYear", KeyEvent.VK_PAGE_UP, KeyEvent.CTRL_DOWN_MASK);
        SGuiUtils.createActionMap(rootPane, this, "actionNextMonth", "nextMonth", KeyEvent.VK_PAGE_DOWN, 0);
        SGuiUtils.createActionMap(rootPane, this, "actionNextYear", "nextYear", KeyEvent.VK_PAGE_DOWN, KeyEvent.CTRL_DOWN_MASK);
        SGuiUtils.createActionMap(rootPane, this, "actionSystemDate", "systemDate", KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK);
        SGuiUtils.createActionMap(rootPane, this, "actionWorkingDate", "workingDate", KeyEvent.VK_T, KeyEvent.CTRL_DOWN_MASK);
        SGuiUtils.createActionMap(rootPane, this, "actionSelectedDate", "selectedDate", KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK);
        SGuiUtils.createActionMap(rootPane, this, "actionSelectedMonth", "selectedMonth", KeyEvent.VK_M, KeyEvent.CTRL_DOWN_MASK);
        SGuiUtils.createActionMap(rootPane, this, "actionSelectedYear", "selectedYear", KeyEvent.VK_A, KeyEvent.CTRL_DOWN_MASK);
        SGuiUtils.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private GregorianCalendar catchSelectedDate() {
        GregorianCalendar gc = new GregorianCalendar();
        gc.setTime(moGuiDate);

        if (jtCalendar.getSelectedRow() != -1 && jtCalendar.getSelectedColumn() != -1) {
            if ((jtCalendar.getValueAt(jtCalendar.getSelectedRow(), jtCalendar.getSelectedColumn())) != null) {
                gc.set(Calendar.DATE, ((java.lang.Integer) jtCalendar.getValueAt(jtCalendar.getSelectedRow(), jtCalendar.getSelectedColumn())).intValue());
            }
        }

        return gc;
    }

    private void renderCalendar() {
        int col;
        int row;
        int day;
        int dayMax;
        int colOfFirstDay = 0;
        boolean firstTime = true;
        GregorianCalendar gc = new GregorianCalendar();

        gc.setTime(moGuiDate);
        jlMonth.setText(masMonths[gc.get(Calendar.MONTH)] + " " + gc.get(Calendar.YEAR));

        // Clear calendar:

        for (row = 0; row < jtCalendar.getRowCount(); row++) {
            for (col = 0; col < jtCalendar.getColumnCount(); col++) {
                jtCalendar.setValueAt(null, row, col);
            }
        }

        // Render calendar:

        gc.set(Calendar.DATE, 1);
        colOfFirstDay = gc.get(Calendar.DAY_OF_WEEK) - (SLibTimeUtils.getFirstDayOfWeekStd() - 1) - 1;
        if (colOfFirstDay < 0) {
            colOfFirstDay = 7 + colOfFirstDay;  // colOfFirstDay is negative
        }

        gc.setTime(moGuiDate);
        day = 0;
        dayMax = SLibTimeUtils.getMaxDayOfMonth(moGuiDate);

        for (row = 0; row < jtCalendar.getRowCount() && day < dayMax; row++) {
            for (col = firstTime ? colOfFirstDay : 0; col < jtCalendar.getColumnCount(); col++) {
                firstTime = false;
                jtCalendar.setValueAt(new Integer(++day), row, col);

                if (day == gc.get(Calendar.DATE)) {
                    jtCalendar.setRowSelectionInterval(row, row);
                    jtCalendar.setColumnSelectionInterval(col, col);
                }

                if (day == dayMax) {
                    break;
                }
            }
        }
    }

    private void actionRenderCalendar(int incYear, int incMonth) {
        GregorianCalendar gc = catchSelectedDate();

        gc.add(Calendar.YEAR, incYear);
        gc.add(Calendar.MONTH, incMonth);
        moGuiDate = new SGuiDate(SGuiConsts.GUI_DATE_DATE, gc.getTime().getTime());
        renderCalendar();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbNextMonth;
    private javax.swing.JButton jbNextYear;
    private javax.swing.JButton jbPrevMonth;
    private javax.swing.JButton jbPrevYear;
    private javax.swing.JButton jbSelectedDate;
    private javax.swing.JButton jbSelectedMonth;
    private javax.swing.JButton jbSelectedYear;
    private javax.swing.JButton jbSystemDate;
    private javax.swing.JButton jbWorkingDate;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlMonth;
    private javax.swing.JLabel jlSystemDate;
    private javax.swing.JLabel jlWorkingDate;
    private javax.swing.JPanel jpButtonsSys;
    private javax.swing.JPanel jpButtonsUser;
    private javax.swing.JPanel jpCalendar;
    private javax.swing.JPanel jpCalendarCmd;
    private javax.swing.JPanel jpCalendarCmdLabel;
    private javax.swing.JPanel jpCalendarCmdNext;
    private javax.swing.JPanel jpCalendarCmdPrev;
    private javax.swing.JPanel jpCommand;
    private javax.swing.JPanel jpCommandButtons;
    private javax.swing.JPanel jpCommandDates;
    private javax.swing.JTable jtCalendar;
    private javax.swing.JTextField jtfDate;
    private javax.swing.JTextField jtfSystemDate;
    private javax.swing.JTextField jtfWorkingDate;
    // End of variables declaration//GEN-END:variables

    /*
     * Public methods
     */

    public void actionSystemDate() {
        moGuiDate = new SGuiDate(SGuiConsts.GUI_DATE_DATE, miClient.getSession().getSystemDate().getTime());
        mnPickerResult = SGuiConsts.FORM_RESULT_OK;
        setVisible(false);
    }

    public void actionWorkingDate() {
        moGuiDate = new SGuiDate(SGuiConsts.GUI_DATE_DATE, miClient.getSession().getWorkingDate().getTime());
        mnPickerResult = SGuiConsts.FORM_RESULT_OK;
        setVisible(false);
    }

    public void actionSelectedDate() {
        SGuiValidation validation = validatePicker();

        if (!validation.isValid()) {
            miClient.showMsgBoxWarning(validation.getMessage());
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
        }
        else {
            moGuiDate = new SGuiDate(SGuiConsts.GUI_DATE_DATE, catchSelectedDate().getTime().getTime());
            mnPickerResult = SGuiConsts.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionSelectedMonth() {
        if (jbSelectedMonth.isEnabled()) {
            moGuiDate = new SGuiDate(SGuiConsts.GUI_DATE_MONTH, catchSelectedDate().getTime().getTime());
            mnPickerResult = SGuiConsts.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionSelectedYear() {
        if (jbSelectedYear.isEnabled()) {
            moGuiDate = new SGuiDate(SGuiConsts.GUI_DATE_YEAR, catchSelectedDate().getTime().getTime());
            mnPickerResult = SGuiConsts.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionPrevMonth() {
        actionRenderCalendar(0, -1);
    }

    public void actionPrevYear() {
        actionRenderCalendar(-1, 0);
    }

    public void actionNextMonth() {
        actionRenderCalendar(0, 1);
    }

    public void actionNextYear() {
        actionRenderCalendar(1, 0);
    }

    /*
     * Override methods
     */

    @Override
    public void setPickerSettings(SGuiClient client, int pickerType, int pickerSubtype, SGuiOptionPickerSettings settings) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void resetPicker() {
        mnPickerResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        moGuiDate = new SGuiDate(SGuiConsts.GUI_DATE_DATE, miClient.getSession().getWorkingDate().getTime());
        jtfSystemDate.setText(SLibUtils.DateFormatDate.format(miClient.getSession().getSystemDate()));
        jtfWorkingDate.setText(SLibUtils.DateFormatDate.format(miClient.getSession().getWorkingDate()));
    }

    @Override
    public void setPickerVisible(final boolean visible) {
        setVisible(visible);
    }

    @Override
    public void setOption(final Object option) {
        if (option == null) {
            moGuiDate = new SGuiDate(SGuiConsts.GUI_DATE_DATE, miClient.getSession().getWorkingDate().getTime());
        }
        else {
            moGuiDate = new SGuiDate(SGuiConsts.GUI_DATE_DATE, ((Date) option).getTime());
        }

        jtfDate.setText(SLibUtils.DateFormatDate.format(moGuiDate));
        renderCalendar();
    }

    @Override
    public SGuiDate getOption() {
        return moGuiDate;
    }

    @Override
    public SGuiValidation validatePicker() {
        SGuiValidation validation = new SGuiValidation();

        if (!(jtCalendar.getSelectedRow() != -1 && jtCalendar.getSelectedColumn() != -1)) {
            validation.setMessage("Se debe seleccionar una fecha.");
            validation.setComponent(jtCalendar);
        }
        else if (jtCalendar.getValueAt(jtCalendar.getSelectedRow(), jtCalendar.getSelectedColumn()) == null) {
            validation.setMessage("Se debe seleccionar una fecha.");
            validation.setComponent(jtCalendar);
        }

        return validation;
    }

    @Override
    public int getPickerType() {
        return mnPickerType;
    }

    @Override
    public int getPickerSubtype() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public int getPickerResult() {
        return mnPickerResult;
    }

    @Override
    public void actionOk() {

    }

    @Override
    public void actionCancel() {
        mnPickerResult = SGuiConsts.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbPrevMonth) {
                actionPrevMonth();
            }
            else if (button == jbPrevYear) {
                actionPrevYear();
            }
            else if (button == jbNextMonth) {
                actionNextMonth();
            }
            else if (button == jbNextYear) {
                actionNextYear();
            }
            else if (button == jbSystemDate) {
                actionSystemDate();
            }
            else if (button == jbWorkingDate) {
                actionWorkingDate();
            }
            else if (button == jbSelectedDate) {
                actionSelectedDate();
            }
            else if (button == jbSelectedMonth) {
                actionSelectedMonth();
            }
            else if (button == jbSelectedYear) {
                actionSelectedYear();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
