/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SGridFilterDatePeriod.java
 *
 * Created on 4/09/2011, 11:56:10 PM
 */

package sa.lib.grid;

import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JPanel;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiDate;
import sa.lib.gui.SGuiDatePicker;

/**
 *
 * @author Sergio Flores
 */
public class SGridFilterDatePeriod extends JPanel implements SGridFilter {

    protected SGuiClient miClient;
    protected SGridPaneView moPaneView;
    protected int mnDatePickerType;
    protected SGuiDatePicker moDatePicker;
    protected SGuiDate moDate;

    /** Creates new form SGridFilterDatePeriod */
    public SGridFilterDatePeriod(SGuiClient client, SGridPaneView paneView, int datePickerType) {
        miClient = client;
        moPaneView = paneView;
        mnDatePickerType = datePickerType;
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfPeriod = new javax.swing.JTextField();
        jpAdjustment = new javax.swing.JPanel();
        jbIncrementPeriod = new javax.swing.JButton();
        jbDecrementPeriod = new javax.swing.JButton();
        jbSetPeriod = new javax.swing.JButton();
        jbSetCurrentDate = new javax.swing.JButton();
        jbSetCurrentMonth = new javax.swing.JButton();
        jbSetCurrentYear = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfPeriod.setEditable(false);
        jtfPeriod.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfPeriod.setText("01/01/2001");
        jtfPeriod.setToolTipText("Período");
        jtfPeriod.setFocusable(false);
        jtfPeriod.setPreferredSize(new java.awt.Dimension(65, 23));
        add(jtfPeriod);

        jpAdjustment.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        jbIncrementPeriod.setText("+");
        jbIncrementPeriod.setFocusable(false);
        jbIncrementPeriod.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbIncrementPeriod.setPreferredSize(new java.awt.Dimension(20, 11));
        jbIncrementPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbIncrementPeriodActionPerformed(evt);
            }
        });
        jpAdjustment.add(jbIncrementPeriod);

        jbDecrementPeriod.setText("‒");
        jbDecrementPeriod.setFocusable(false);
        jbDecrementPeriod.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbDecrementPeriod.setPreferredSize(new java.awt.Dimension(20, 11));
        jbDecrementPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDecrementPeriodActionPerformed(evt);
            }
        });
        jpAdjustment.add(jbDecrementPeriod);

        add(jpAdjustment);

        jbSetPeriod.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_cal.gif"))); // NOI18N
        jbSetPeriod.setToolTipText("Seleccionar período");
        jbSetPeriod.setPreferredSize(new java.awt.Dimension(23, 23));
        jbSetPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSetPeriodActionPerformed(evt);
            }
        });
        add(jbSetPeriod);

        jbSetCurrentDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_date_day.gif"))); // NOI18N
        jbSetCurrentDate.setToolTipText("Día actual");
        jbSetCurrentDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jbSetCurrentDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSetCurrentDateActionPerformed(evt);
            }
        });
        add(jbSetCurrentDate);

        jbSetCurrentMonth.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_date_month.gif"))); // NOI18N
        jbSetCurrentMonth.setToolTipText("Mes actual");
        jbSetCurrentMonth.setPreferredSize(new java.awt.Dimension(23, 23));
        jbSetCurrentMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSetCurrentMonthActionPerformed(evt);
            }
        });
        add(jbSetCurrentMonth);

        jbSetCurrentYear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_date_year.gif"))); // NOI18N
        jbSetCurrentYear.setToolTipText("Año actual");
        jbSetCurrentYear.setPreferredSize(new java.awt.Dimension(23, 23));
        jbSetCurrentYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSetCurrentYearActionPerformed(evt);
            }
        });
        add(jbSetCurrentYear);
    }// </editor-fold>//GEN-END:initComponents

    private void jbSetPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSetPeriodActionPerformed
        actionSetPeriod();
    }//GEN-LAST:event_jbSetPeriodActionPerformed

    private void jbSetCurrentDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSetCurrentDateActionPerformed
        actionSetCurrentDate();
    }//GEN-LAST:event_jbSetCurrentDateActionPerformed

    private void jbSetCurrentMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSetCurrentMonthActionPerformed
        actionSetCurrentMonth();
    }//GEN-LAST:event_jbSetCurrentMonthActionPerformed

    private void jbSetCurrentYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSetCurrentYearActionPerformed
        actionSetCurrentYear();
    }//GEN-LAST:event_jbSetCurrentYearActionPerformed

    private void jbIncrementPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbIncrementPeriodActionPerformed
        actionIncrementPeriod();
    }//GEN-LAST:event_jbIncrementPeriodActionPerformed

    private void jbDecrementPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDecrementPeriodActionPerformed
        actionDecrementPeriod();
    }//GEN-LAST:event_jbDecrementPeriodActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbDecrementPeriod;
    private javax.swing.JButton jbIncrementPeriod;
    private javax.swing.JButton jbSetCurrentDate;
    private javax.swing.JButton jbSetCurrentMonth;
    private javax.swing.JButton jbSetCurrentYear;
    private javax.swing.JButton jbSetPeriod;
    private javax.swing.JPanel jpAdjustment;
    private javax.swing.JTextField jtfPeriod;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        switch (mnDatePickerType) {
            case SGuiConsts.DATE_PICKER_DATE:
                moDatePicker = new SGuiDatePicker(miClient, mnDatePickerType);
                jtfPeriod.setToolTipText("Fecha de corte");
                jbSetPeriod.setToolTipText("Seleccionar fecha de corte");
                break;
            case SGuiConsts.DATE_PICKER_DATE_PERIOD:
                moDatePicker = new SGuiDatePicker(miClient, mnDatePickerType);
                jtfPeriod.setToolTipText("Período");
                jbSetPeriod.setToolTipText("Seleccionar período");
                break;
            default:
                miClient.showMsgBoxError(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        setPeriod(null, false);
    }

    private void setPeriod(final SGuiDate date, final boolean broadcastEvent) {
        moDate = date;
        
        if (moDate == null) {
            jtfPeriod.setText("?");
        }
        else {
            SimpleDateFormat format = null;
            
            switch (moDate.getGuiType()) {
                case SGuiConsts.GUI_DATE_DATE:
                    format = SLibUtils.DateFormatDate;
                    break;
                case SGuiConsts.GUI_DATE_MONTH:
                    format = SLibUtils.DateFormatDateYearMonth;
                    break;
                case SGuiConsts.GUI_DATE_YEAR:
                    format = SLibUtils.DateFormatDateYear;
                    break;
                default:
            }
            
            jtfPeriod.setText(format.format(moDate));
            
            if (broadcastEvent) {
                moPaneView.putFilter(SGridConsts.FILTER_DATE_PERIOD, new SGridFilterValue(SGridConsts.FILTER_DATE, SGridConsts.FILTER_DATA_TYPE_GUIDATE, moDate));
            }
        }
    }
    
    private void adjustPeriod(final Adjustment adjustment) {
        Date date = null;
        int leap = adjustment == Adjustment.Increment ? 1 : -1;
        
        switch (moDate.getGuiType()) {
            case SGuiConsts.GUI_DATE_DATE:
                date = SLibTimeUtils.addDate(moDate, 0, 0, leap);
                break;
            case SGuiConsts.GUI_DATE_MONTH:
                date = SLibTimeUtils.addDate(moDate, 0, leap, 0);
                break;
            case SGuiConsts.GUI_DATE_YEAR:
                date = SLibTimeUtils.addDate(moDate, leap, 0, 0);
                break;
            default:
        }
        
        setPeriod(new SGuiDate(moDate.getGuiType(), date.getTime()), true);
    }
    
    private void actionSetPeriod() {
        moDatePicker.resetPicker();
        moDatePicker.setOption(moDate);
        moDatePicker.setVisible(true);

        if (moDatePicker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            setPeriod(moDatePicker.getOption(), true);
        }
    }
    
    private void actionSetCurrentDate() {
        setPeriod(new SGuiDate(SGuiConsts.GUI_DATE_DATE, miClient.getSession().getCurrentDate().getTime()), true);
    }
    
    private void actionSetCurrentMonth() {
        if (mnDatePickerType == SGuiConsts.DATE_PICKER_DATE) {
            setPeriod(new SGuiDate(SGuiConsts.GUI_DATE_DATE, SLibTimeUtils.getEndOfMonth(miClient.getSession().getCurrentDate()).getTime()), true);
        }
        else {
            setPeriod(new SGuiDate(SGuiConsts.GUI_DATE_MONTH, miClient.getSession().getCurrentDate().getTime()), true);
        }
    }
    
    private void actionSetCurrentYear() {
        if (mnDatePickerType == SGuiConsts.DATE_PICKER_DATE) {
            setPeriod(new SGuiDate(SGuiConsts.GUI_DATE_DATE, SLibTimeUtils.getEndOfYear(miClient.getSession().getCurrentDate()).getTime()), true);
        }
        else {
            setPeriod(new SGuiDate(SGuiConsts.GUI_DATE_YEAR, miClient.getSession().getCurrentDate().getTime()), true);
        }
    }
    
    private void actionIncrementPeriod() {
        adjustPeriod(Adjustment.Increment);
    }
    
    private void actionDecrementPeriod() {
        adjustPeriod(Adjustment.Decrement);
    }
    
    /**
     * @param value Date as sa.lib.gui.SGuiDate.
     */
    @Override
    public void initFilter(final Object value) {
        // 1. set date:
        setPeriod((SGuiDate) value, false);
        
        // 2. once date set, set filter:
        moPaneView.getFiltersMap().put(SGridConsts.FILTER_DATE_PERIOD, new SGridFilterValue(SGridConsts.FILTER_DATE, SGridConsts.FILTER_DATA_TYPE_GUIDATE, moDate));
    }
    
    private enum Adjustment {
        Increment,
        Decrement
    }
}
