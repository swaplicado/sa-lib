/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SGridFilterDateCutOff.java
 *
 * Created on 4/09/2011, 11:56:10 PM
 */

package sa.lib.grid;

import java.util.Date;
import javax.swing.JPanel;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiDate;
import sa.lib.gui.SGuiDatePicker;

/**
 *
 * @author Sergio Flores
 */
public class SGridFilterDateCutOff extends JPanel implements SGridFilter {

    protected SGuiClient miClient;
    protected SGridPaneView moPaneView;
    protected SGuiDatePicker moDatePicker;
    protected SGuiDate moDate;

    /** Creates new form SGridFilterDateCutOff */
    public SGridFilterDateCutOff(SGuiClient client, SGridPaneView paneView) {
        miClient = client;
        moPaneView = paneView;
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfPeriod = new javax.swing.JTextField();
        jbDate = new javax.swing.JButton();
        jbCurrentDate = new javax.swing.JButton();
        jbDateLess = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(0, 5, 0));

        jtfPeriod.setEditable(false);
        jtfPeriod.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfPeriod.setText("01/01/2001");
        jtfPeriod.setToolTipText("Fecha de corte");
        jtfPeriod.setFocusable(false);
        jtfPeriod.setPreferredSize(new java.awt.Dimension(65, 23));
        add(jtfPeriod);

        jbDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_cal.gif"))); // NOI18N
        jbDate.setToolTipText("Seleccionar fecha de corte");
        jbDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDateActionPerformed(evt);
            }
        });
        add(jbDate);

        jbCurrentDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_date_day.gif"))); // NOI18N
        jbCurrentDate.setToolTipText("Día actual");
        jbCurrentDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jbCurrentDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCurrentDateActionPerformed(evt);
            }
        });
        add(jbCurrentDate);

        jbDateLess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_null.gif"))); // NOI18N
        jbDateLess.setToolTipText("Sin fecha");
        jbDateLess.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDateLess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDateLessActionPerformed(evt);
            }
        });
        add(jbDateLess);
    }// </editor-fold>//GEN-END:initComponents

    private void jbDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDateActionPerformed
        moDatePicker.resetPicker();
        moDatePicker.setOption(moDate);
        moDatePicker.setPickerVisible(true);

        if (moDatePicker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            setDate(moDatePicker.getOption());
            moPaneView.putFilter(SGridConsts.FILTER_DATE, moDate);
        }
    }//GEN-LAST:event_jbDateActionPerformed

    private void jbCurrentDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCurrentDateActionPerformed
        setDate(new SGuiDate(SGuiConsts.GUI_DATE_DATE, miClient.getSession().getWorkingDate().getTime()));
        moPaneView.putFilter(SGridConsts.FILTER_DATE, moDate);
    }//GEN-LAST:event_jbCurrentDateActionPerformed

    private void jbDateLessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDateLessActionPerformed
        setDate(null);
        moPaneView.putFilter(SGridConsts.FILTER_DATE, moDate);
    }//GEN-LAST:event_jbDateLessActionPerformed

    private void initComponentsCustom() {
        moDatePicker = new SGuiDatePicker(miClient, SGuiConsts.DATE_PICKER_DATE);
        setDate(null);
    }

    private void renderPeriod() {
        if (moDate == null) {
            jtfPeriod.setText("∞");
        }
        else {
            jtfPeriod.setText(SLibUtils.DateFormatDate.format(moDate));
        }
    }

    private void setDate(final SGuiDate date) {
        moDate = date;
        renderPeriod();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbCurrentDate;
    private javax.swing.JButton jbDate;
    private javax.swing.JButton jbDateLess;
    private javax.swing.JTextField jtfPeriod;
    // End of variables declaration//GEN-END:variables

    /**
     * @param value Date as java.util.Date.
     */
    @Override
    public void initFilter(final Object value) {
        setDate((SGuiDate) value);
        moPaneView.getFiltersMap().put(SGridConsts.FILTER_DATE, moDate);
    }
}
