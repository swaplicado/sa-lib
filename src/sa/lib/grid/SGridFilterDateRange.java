/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SGridFilterDateRange.java
 *
 * Created on 22/06/2012, 08:11:00 AM
 */

package sa.lib.grid;

import java.util.Date;
import javax.swing.JPanel;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiDate;
import sa.lib.gui.SGuiDateRangePicker;

/**
 *
 * @author Sergio Flores
 */
public class SGridFilterDateRange extends JPanel implements SGridFilter {

    protected SGuiClient miClient;
    protected SGridPaneView moPaneView;
    protected SGuiDateRangePicker moDateRangePicker;
    protected SGuiDate moDateStart;
    protected SGuiDate moDateEnd;

    /** Creates new form SGridFilterDateRange */
    public SGridFilterDateRange(SGuiClient client, SGridPaneView paneView) {
        miClient = client;
        moPaneView = paneView;
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfRange = new javax.swing.JTextField();
        jbRange = new javax.swing.JButton();
        jbCurrentDate = new javax.swing.JButton();
        jbCurrentMonth = new javax.swing.JButton();
        jbCurrentYear = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(0, 5, 0));

        jtfRange.setEditable(false);
        jtfRange.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfRange.setText("01/01/2001 - 01/01/2001");
        jtfRange.setToolTipText("Rango de fechas");
        jtfRange.setFocusable(false);
        jtfRange.setPreferredSize(new java.awt.Dimension(135, 23));
        add(jtfRange);

        jbRange.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_cal.gif"))); // NOI18N
        jbRange.setToolTipText("Seleccionar rango de fechas");
        jbRange.setPreferredSize(new java.awt.Dimension(23, 23));
        jbRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRangeActionPerformed(evt);
            }
        });
        add(jbRange);

        jbCurrentDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_date_day.gif"))); // NOI18N
        jbCurrentDate.setToolTipText("Día actual");
        jbCurrentDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jbCurrentDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCurrentDateActionPerformed(evt);
            }
        });
        add(jbCurrentDate);

        jbCurrentMonth.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_date_month.gif"))); // NOI18N
        jbCurrentMonth.setToolTipText("Mes actual");
        jbCurrentMonth.setPreferredSize(new java.awt.Dimension(23, 23));
        jbCurrentMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCurrentMonthActionPerformed(evt);
            }
        });
        add(jbCurrentMonth);

        jbCurrentYear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cal_date_year.gif"))); // NOI18N
        jbCurrentYear.setToolTipText("Año actual");
        jbCurrentYear.setPreferredSize(new java.awt.Dimension(23, 23));
        jbCurrentYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCurrentYearActionPerformed(evt);
            }
        });
        add(jbCurrentYear);
    }// </editor-fold>//GEN-END:initComponents

    private void jbRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRangeActionPerformed
        moDateRangePicker.resetPicker();
        moDateRangePicker.setOption(new Date[] { moDateStart, moDateEnd });
        moDateRangePicker.setVisible(true);

        if (moDateRangePicker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            setPeriod(moDateRangePicker.getOption());
            moPaneView.putFilter(SGridConsts.FILTER_DATE_RANGE, getPeriod());
        }
    }//GEN-LAST:event_jbRangeActionPerformed

    private void jbCurrentDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCurrentDateActionPerformed
        setPeriod(new Date[] { miClient.getSession().getWorkingDate(), miClient.getSession().getWorkingDate() });
        moPaneView.putFilter(SGridConsts.FILTER_DATE_RANGE, getPeriod());
    }//GEN-LAST:event_jbCurrentDateActionPerformed

    private void jbCurrentMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCurrentMonthActionPerformed
        setPeriod(new Date[] { SLibTimeUtils.getBeginOfMonth(miClient.getSession().getWorkingDate()), SLibTimeUtils.getEndOfMonth(miClient.getSession().getWorkingDate()) });
        moPaneView.putFilter(SGridConsts.FILTER_DATE_RANGE, getPeriod());
    }//GEN-LAST:event_jbCurrentMonthActionPerformed

    private void jbCurrentYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCurrentYearActionPerformed
        setPeriod(new Date[] { SLibTimeUtils.getBeginOfYear(miClient.getSession().getWorkingDate()), SLibTimeUtils.getEndOfYear(miClient.getSession().getWorkingDate()) });
        moPaneView.putFilter(SGridConsts.FILTER_DATE_RANGE, getPeriod());
    }//GEN-LAST:event_jbCurrentYearActionPerformed

    private void initComponentsCustom() {
        moDateRangePicker = miClient.getDateRangePicker();
        setPeriod(null);
    }

    private void renderPeriod() {
        if (moDateStart == null) {
            jtfRange.setText("");
        }
        else {
            jtfRange.setText(SLibUtils.DateFormatDate.format(moDateStart) + " - " + SLibUtils.DateFormatDate.format(moDateEnd));
        }
    }

    private void setPeriod(Date[] range) {
        if (range == null) {
            moDateStart = null;
            moDateEnd = null;
        }
        else {
            moDateStart = new SGuiDate(SGuiConsts.GUI_DATE_DATE, range[0].getTime());
            moDateEnd = new SGuiDate(SGuiConsts.GUI_DATE_DATE, range[1].getTime());
        }

        renderPeriod();
    }

    private Date[] getPeriod() {
        return moDateStart == null ? null : new Date[] { moDateStart, moDateEnd };
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbCurrentDate;
    private javax.swing.JButton jbCurrentMonth;
    private javax.swing.JButton jbCurrentYear;
    private javax.swing.JButton jbRange;
    private javax.swing.JTextField jtfRange;
    // End of variables declaration//GEN-END:variables

    /**
     * @param value Date range as java.util.Date[].
     */
    @Override
    public void initFilter(final Object value) {
        setPeriod((Date[]) value);
        moPaneView.getFiltersMap().put(SGridConsts.FILTER_DATE_RANGE, getPeriod());
    }
}
